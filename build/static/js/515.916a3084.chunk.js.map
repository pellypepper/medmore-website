{"version":3,"file":"static/js/515.916a3084.chunk.js","mappings":"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","sources":["component/spinner.js","pages/card/card.js"],"sourcesContent":["import React from \"react\";\nimport \"./spinner.css\"; \n\nconst Spinner = () => {\n    return (\n        <aside className=\"spinner-container\">\n            <div className=\"spinner\"></div>\n        </aside>\n    );\n};\n\nexport default Spinner;\n","import './card.css';\nimport React, { useState, useEffect } from 'react';\nimport { useStripe, useElements, CardNumberElement, CardExpiryElement, CardCvcElement } from '@stripe/react-stripe-js';\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCheckCircle, faExclamationCircle } from '@fortawesome/free-solid-svg-icons';\nimport Spinner from '../../component/spinner'; // Import the spinner component\n\nconst Card = () => {\n    const [loading, setLoading] = useState(false);\n    const stripe = useStripe();\n    const elements = useElements();\n    const [error, setError] = useState(null);\n    const [paymentMethodType, setPaymentMethodType] = useState('card'); // Default to card payment\n    const [alertMessage, setAlertMessage] = useState(\"\"); // State for alert message\n    const location = useLocation();\n    const total = location.state?.total || 0;\n    const form = location.state?.form || {};\n    const navigate = useNavigate();\n    const [fadeOut, setFadeOut] = useState(false);\n    const cart = location.state?.cart || [];\n\n\n    const handleSubmit = async (event) => {\n        event.preventDefault();\n        if (loading) return; // Prevent double clicks\n        setLoading(true);\n        setError(null);\n        setAlertMessage(\"\");\n\n        if (!stripe || !elements) {\n            console.error('Stripe has not been initialized.');\n            setLoading(false);\n            return;\n        }\n\n        try {\n            console.log('Creating payment intent...');\n            const response = await fetch(`${process.env.REACT_APP_API_URL}/create-payment-intent`, {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ amount: total, paymentMethodType }),\n            });\n\n            if (!response.ok) {\n                throw new Error(`Failed to create payment intent: ${response.statusText}`);\n            }\n\n            const { clientSecret } = await response.json();\n            if (!clientSecret) {\n                throw new Error('Client secret is missing in the response.');\n            }\n\n            console.log('Client secret received:', clientSecret);\n\n            let confirmResult;\n\n            if (paymentMethodType === 'card') {\n                const cardNumberElement = elements.getElement(CardNumberElement);\n                const cardExpiryElement = elements.getElement(CardExpiryElement);\n                const cardCvcElement = elements.getElement(CardCvcElement);\n\n                // Check if all elements are available\n                if (!cardNumberElement || !cardExpiryElement || !cardCvcElement) {\n                    setError('Card elements are not available.');\n                    setLoading(false);\n                    return;\n                }\n\n                confirmResult = await stripe.confirmCardPayment(clientSecret, {\n                    payment_method: {\n                        card: cardNumberElement,\n                    },\n                });\n            } else if (['apple_pay', 'google_pay', 'klarna'].includes(paymentMethodType)) {\n                // Placeholder for handling other payment methods\n                console.log(`Payment method type '${paymentMethodType}' selected, but not implemented.`);\n                setError(`Payment method '${paymentMethodType}' is not yet supported.`);\n                setLoading(false);\n                return;\n            }\n\n            if (confirmResult && confirmResult.error) {\n                console.error('Payment failed:', confirmResult.error.message);\n                setError(confirmResult.error.message);\n            } else if (confirmResult && confirmResult.paymentIntent) {\n                console.log('Payment successful:', confirmResult.paymentIntent);\n                console.log('Payment intent ID:', confirmResult.paymentIntent.id);\n                console.log(cart);\n                await sendUserDataToServer(form, confirmResult.paymentIntent.id, cart);\n                navigate('/order', {\n                    state: {\n                        order: {\n                            id: confirmResult.paymentIntent.id,\n                            total: total,\n                            email: form.email,\n                            items: cart.map(item => ({\n                                name: item.productName, // Ensure the property is correct\n                                quantity: item.quantity,\n                            })),\n                        },\n                    },\n                });\n            \n            } else {\n                console.error('Unexpected payment confirmation result:', confirmResult);\n                setError('An unexpected error occurred during payment confirmation.');\n            }\n        } catch (err) {\n            console.error('Error in payment flow:', err.message);\n            setError(err.message);\n        } finally {\n            setLoading(false); // Ensure loading state is turned off\n        }\n    };\n\n    const sendUserDataToServer = async (userData, paymentIntentId, cart) => {\n        try {\n            const response = await fetch(`${process.env.REACT_APP_API_URL}/record-payment`, {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ ...userData, paymentIntentId, cart }),\n            });\n\n            if (!response.ok) {\n                throw new Error(`Failed to record payment: ${response.statusText}`);\n            }\n\n            const result = await response.json();\n            console.log('User data recorded successfully:', result);\n            // Optionally navigate to a success page or show a confirmation message\n            setAlertMessage(` \"Payment recorded successfully!\" `);\n        } catch (error) {\n            console.error('Error recording payment:', error);\n            setError('Failed to record payment on server.');\n        }\n    };\n    \n\n    useEffect(() => {\n        if (alertMessage || error) {\n            const timer = setTimeout(() => {\n                setFadeOut(true); // Trigger fade out\n                const removeAlertTimer = setTimeout(() => {\n                    setAlertMessage(\"\"); // Clear the alert after fade out\n                    setError(\"\");\n                    setFadeOut(false); // Reset fade out state\n                }, 500); // Match this time with the CSS transition duration\n\n                return () => clearTimeout(removeAlertTimer);\n            }, 5000); // Keep alert message visible for 5 seconds\n\n            return () => clearTimeout(timer); // Cleanup the timer on unmount\n        }\n    }, [alertMessage, error]);\n\n  \n    \n\n    return (\n        <div className='card-section'>\n            <div className='card-wrapper'>\n                <div className='card-text'>\n                    <p>${total}</p>\n                    <p>Payment</p>\n                </div>\n\n                {loading && <Spinner />} {/* Show spinner when loading */}\n                \n                <form className='mt-2' onSubmit={handleSubmit}>\n                    <label className='label'>\n                        Payment Method:\n                        <div className='payment-div'>\n                            <div>\n                                <input\n                                    type='radio'\n                                    onChange={(e) => setPaymentMethodType(e.target.value)}\n                                    name='paymentMethod'\n                                    value='card'\n                                    defaultChecked\n                                />\n                                <img src='card.jpg' alt='card' /> Card\n                            </div>\n                            <div>\n                                <input\n                                    type='radio'\n                                    onChange={(e) => setPaymentMethodType(e.target.value)}\n                                    name='paymentMethod'\n                                    value='apple_pay'\n                                />\n                                <img src='apple.png' alt='apple' /> Apple Pay\n                            </div>\n                            <div>\n                                <input\n                                    type='radio'\n                                    onChange={(e) => setPaymentMethodType(e.target.value)}\n                                    name='paymentMethod'\n                                    value='google_pay'\n                                />\n                                <img src='google.png' alt='google' /> Google Pay\n                            </div>\n                            <div>\n                                <input\n                                    type='radio'\n                                    onChange={(e) => setPaymentMethodType(e.target.value)}\n                                    name='paymentMethod'\n                                    value='klarna'\n                                />\n                                <img src='klarna.webp' alt='klarna' /> Klarna\n                            </div>\n                        </div>\n                    </label>\n\n                    {paymentMethodType === 'card' && (\n                        <>\n                            <label htmlFor=\"card-number\">Card Number</label>\n                            <CardNumberElement\n                                id=\"card-number\"\n                                className=\"card-element full-width\"\n                                options={{\n                                    style: {\n                                        base: {\n                                            fontSize: '16px',\n                                            color: '#424770',\n                                            '::placeholder': {\n                                                color: '#aab7c4',\n                                            },\n                                        },\n                                        invalid: {\n                                            color: '#9e2146',\n                                        },\n                                    },\n                                }}\n                            />\n\n                            <label htmlFor=\"card-expiry\">Expiry Date</label>\n                            <CardExpiryElement\n                                id=\"card-expiry\"\n                                className=\"card-element\"\n                                options={{\n                                    style: {\n                                        base: {\n                                            fontSize: '16px',\n                                            color: '#424770',\n                                            '::placeholder': {\n                                                color: '#aab7c4',\n                                            },\n                                        },\n                                        invalid: {\n                                            color: '#9e2146',\n                                        },\n                                    },\n                                }}\n                            />\n\n                            <label htmlFor=\"card-cvc\">CVV</label>\n                            <CardCvcElement\n                                id=\"card-cvc\"\n                                className=\"card-element\"\n                                options={{\n                                    style: {\n                                        base: {\n                                            fontSize: '16px',\n                                            color: '#424770',\n                                            '::placeholder': {\n                                                color: '#aab7c4',\n                                            },\n                                        },\n                                        invalid: {\n                                            color: '#9e2146',\n                                        },\n                                    },\n                                }}\n                            />\n                        </>\n                    )}\n                    <button className='button' type=\"submit\" disabled={!stripe || loading}>\n                        {loading ? 'Processing...' : `Pay Now $${total}`}\n                    </button>\n                    {error && <div className='error'>{error}</div>}\n                </form>\n            </div>\n\n            {alertMessage && (\n                <div className={`success-popup ${fadeOut ? 'success-popup-exit' : ''}`}>\n                    <FontAwesomeIcon icon={faCheckCircle} color=\"green\" size=\"2x\" />\n                    <p>Payment Successful</p>\n                    <p>{alertMessage}</p>\n                </div>\n            )}\n\n            {error && (\n                <div className={`error ${fadeOut ? 'error-exit' : ''}`}>\n                    <FontAwesomeIcon icon={faExclamationCircle} color=\"red\" size=\"2x\" />\n                    <p>Payment Declined</p>\n                    <p>{error}</p>\n                    <button className='mt-1' onClick={() => setError('')}> Try Again</button>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default Card;\n"],"names":["Spinner","_jsx","className","children","Card","_location$state","_location$state2","_location$state3","loading","setLoading","useState","stripe","useStripe","elements","useElements","error","setError","paymentMethodType","setPaymentMethodType","alertMessage","setAlertMessage","location","useLocation","total","state","form","navigate","useNavigate","fadeOut","setFadeOut","cart","sendUserDataToServer","async","userData","paymentIntentId","response","fetch","method","headers","body","JSON","stringify","ok","Error","statusText","result","json","console","log","useEffect","timer","setTimeout","removeAlertTimer","clearTimeout","_jsxs","onSubmit","event","preventDefault","amount","clientSecret","confirmResult","cardNumberElement","getElement","CardNumberElement","cardExpiryElement","CardExpiryElement","cardCvcElement","CardCvcElement","confirmCardPayment","payment_method","card","includes","message","paymentIntent","id","order","email","items","map","item","name","productName","quantity","err","type","onChange","e","target","value","defaultChecked","src","alt","_Fragment","htmlFor","options","style","base","fontSize","color","invalid","disabled","FontAwesomeIcon","icon","faCheckCircle","size","faExclamationCircle","onClick"],"sourceRoot":""}