{"version":3,"file":"static/js/288.2141c863.chunk.js","mappings":"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","sources":["component/spinner.js","pages/adminDashboard/admin.js"],"sourcesContent":["import React from \"react\";\r\nimport \"./spinner.css\"; \r\n\r\nconst Spinner = () => {\r\n    return (\r\n        <aside className=\"spinner-container\">\r\n            <div className=\"spinner\"></div>\r\n        </aside>\r\n    );\r\n};\r\n\r\nexport default Spinner;\r\n","import React, { useEffect, useState, useRef } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Chart from 'chart.js/auto';\r\nimport Spinner from '../../component/spinner'; \r\nimport axios from 'axios';\r\nimport './admin.css';\r\n\r\nconst AdminDashboard = () => {\r\n    const [orders, setOrders] = useState([]);\r\n    const [alertMessage, setAlertMessage] = useState(\"\");\r\n    const [products, setProducts] = useState([]);\r\n    const [salesData, setSalesData] = useState({ sales_count: 0, total: 0, total_buyer: 0 });\r\n    const [loading, setLoading] = useState(false);\r\n    const [activeMenu, setActiveMenu] = useState('Dashboard'); \r\n    const [productForm, setProductForm] = useState({ id: '', name: '', price: '', image: null }); // Change img to null\r\n    const [isEditing, setIsEditing] = useState(false);\r\n    const chartRef = useRef(null); \r\n    const [fadeOut, setFadeOut] = useState(false);\r\n    const navigate = useNavigate();\r\n    const [isAddingProduct, setIsAddingProduct] = useState(false); \r\n\r\n\r\n    const handleLogout = async () => {\r\n        try {\r\n            const response = await fetch(`${process.env.REACT_APP_API_URL}/auth/logout`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                credentials: 'include', \r\n            });\r\n    \r\n            if (!response.ok) {\r\n                throw new Error('Failed to log out');\r\n            }\r\n    \r\n            const data = await response.json();\r\n            console.log(data.message); \r\n            navigate('/'); \r\n        } catch (error) {\r\n            console.error('Logout error:', error);\r\n            alert('Failed to log out. Please try again.');  \r\n          setAlertMessage('Failed to log out. Please try again.');\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                setLoading(true);\r\n                const productsResponse = await fetch(`${process.env.REACT_APP_API_URL}/products`);\r\n                const productsData = await productsResponse.json();\r\n\r\n                const salesResponse = await fetch(`${process.env.REACT_APP_API_URL}/admin/sales`);\r\n                const salesData = await salesResponse.json();\r\n\r\n                const ordersResponse = await fetch(`${process.env.REACT_APP_API_URL}/admin/orders`);\r\n                const ordersData = await ordersResponse.json();\r\n              \r\n\r\n                setProducts(productsData);\r\n                setSalesData(salesData);\r\n                setOrders(ordersData);\r\n            } catch (err) {\r\n                console.error('Failed to fetch data', err);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        fetchData();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (chartRef.current) {\r\n            chartRef.current.destroy();\r\n        }\r\n\r\n        if (salesData.sales_count > 0 && activeMenu === 'Dashboard') {\r\n            const ctx = document.getElementById('salesChart').getContext('2d');\r\n            chartRef.current = new Chart(ctx, {\r\n                type: 'line',\r\n                data: {\r\n                    labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May'], \r\n                    datasets: [\r\n                        {\r\n                            label: 'Sales ($)',\r\n                            data: [1200, 1900, 3000, 5000, 2400], \r\n                            borderColor: 'rgba(75, 192, 192, 1)',\r\n                            backgroundColor: 'rgba(75, 192, 192, 0.2)',\r\n                            tension: 0.4,\r\n                        },\r\n                    ],\r\n                },\r\n                options: {\r\n                    responsive: true,\r\n                    plugins: {\r\n                        legend: { position: 'top' },\r\n                    },\r\n                },\r\n            });\r\n        }\r\n\r\n        return () => {\r\n            if (chartRef.current) {\r\n                chartRef.current.destroy();\r\n            }\r\n        };\r\n    }, [salesData, activeMenu]);\r\n\r\n\r\n\r\n    const handleInputChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setProductForm({ ...productForm, [name]: value });\r\n    };\r\n\r\n    const handleFileChange = (e) => {\r\n        const file = e.target.files[0];\r\n\r\n        \r\n        if (file) {\r\n            setProductForm(prevState => ({\r\n                ...prevState,\r\n                image: file\r\n            }));\r\n        }\r\n    };\r\n    \r\n    const handleAddProduct = async (e) => {\r\n        e.preventDefault();\r\n        setIsAddingProduct(true);\r\n      \r\n        if (!productForm.name || !productForm.price) {\r\n            alert('Please enter product name and price');\r\n            return;\r\n        }\r\n    \r\n        if (!productForm.image) {\r\n            alert('Please select an image');\r\n            return;\r\n        }\r\n    \r\n       \r\n        const formData = new FormData();\r\n        formData.append('image', productForm.image);\r\n        formData.append('name', productForm.name);\r\n        formData.append('price', productForm.price);\r\n        \r\n\r\n    \r\n        try {\r\n\r\n       \r\n            const response = await axios.post(\r\n                `${process.env.REACT_APP_API_URL}/products`, \r\n                formData, \r\n                {\r\n                    headers: {\r\n            \r\n                        'Content-Type': 'multipart/form-data',\r\n                    }\r\n                }\r\n            );\r\n    \r\n           \r\n     \r\n           \r\n          \r\n            // Update products list\r\n            setProducts((prevProducts) => [...prevProducts, response.data]);\r\n            \r\n            // Reset form\r\n            setProductForm({ id: '', name: '', price: '', image: null });\r\n            \r\n            setAlertMessage('Product added successfully!');\r\n\r\n         \r\n    \r\n        } catch (error) {\r\n               alert();\r\n            setAlertMessage(`Failed to add product: ${error.response ? error.response.data.error : error.message}`);\r\n        } finally {\r\n            setIsAddingProduct(false);\r\n        }   \r\n    };\r\n    \r\n    const handleEditProduct = (product) => {\r\n        setProductForm({ id: product.id, name: product.name, price: product.price, image: null });\r\n        setIsEditing(true);\r\n    };\r\n\r\n    const handleUpdateProduct = async (e) => {\r\n        e.preventDefault();\r\n        setIsAddingProduct(true);\r\n        const formData = new FormData();\r\n        formData.append('name', productForm.name);\r\n        formData.append('price', productForm.price);\r\n        if (productForm.image) {\r\n            formData.append('image', productForm.image);\r\n        }\r\n\r\n        \r\n        for (const [key, value] of formData.entries()) {\r\n            console.log(`${key}:`, value);\r\n        }\r\n    \r\n        try {\r\n            const response = await axios.put(\r\n                `${process.env.REACT_APP_API_URL}/products/${productForm.id}`, \r\n                formData, \r\n                {\r\n                    headers: {\r\n                        'Content-Type': 'multipart/form-data',\r\n                    }\r\n                }\r\n            );\r\n    \r\n            if (response.status !== 200) {\r\n                throw new Error('Failed to update product');\r\n            }\r\n    \r\n         \r\n            const updatedProduct = response.data;\r\n    \r\n            setProducts((prevProducts) =>\r\n                prevProducts.map((product) =>\r\n                    product.id === updatedProduct.id ? updatedProduct : product\r\n                )\r\n            );\r\n    \r\n            setProductForm({ id: '', name: '', price: '', image: null });\r\n            setIsEditing(false);\r\n            setAlertMessage('Product Updated successfully!');\r\n        } catch (error) {\r\n            console.error('Error updating product:', error);\r\n        } finally {\r\n            setIsAddingProduct(false);\r\n        }   \r\n    };\r\n\r\n    const handleDeleteProduct = async (id) => {\r\n        try {\r\n            const response = await fetch(`${process.env.REACT_APP_API_URL}/products/${id}`, {\r\n                method: 'DELETE',\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error('Failed to delete product');\r\n            }\r\n\r\n            setProducts((prevProducts) => prevProducts.filter((product) => product.id !== id));\r\n        } catch (error) {\r\n            console.error('Error deleting product:', error);\r\n        }\r\n    };\r\n\r\n    const getTopSellingProducts = () => {\r\n        const productSales = products.map(product => {\r\n            const totalSales = orders.reduce((acc, order) => {\r\n                if (order.product_id === product.id) {\r\n                    return acc + order.amount;\r\n                }\r\n                return acc;\r\n            }, 0);\r\n            return { ...product, totalSales };\r\n        });\r\n        return productSales.sort((a, b) => b.totalSales - a.totalSales).slice(0, 5);\r\n    };\r\n\r\n    const topSellingProducts = getTopSellingProducts();\r\n\r\n    const getOrderSummary = () => {\r\n        return orders.reduce((acc, order) => {\r\n            acc[order.payment_status] = (acc[order.payment_status] || 0) + 1;\r\n            return acc;\r\n        }, {});\r\n    };\r\n\r\n    const orderSummary = getOrderSummary();\r\n\r\n    useEffect(() => {\r\n        if (alertMessage) {\r\n            const timer = setTimeout(() => {\r\n                setFadeOut(true);\r\n            }, 5000);\r\n\r\n            return () => clearTimeout(timer);\r\n        } else {\r\n            setFadeOut(false);\r\n        }\r\n    }, [alertMessage]);\r\n\r\n    if (loading) return <Spinner />;\r\n\r\n\r\n    return (\r\n        <div className=\"admin-dashboard\">\r\n            <aside className=\"sidebar\">\r\n                <h2>Admin Dashboard</h2>\r\n                <ul>\r\n                    <li onClick={() => setActiveMenu('Dashboard')} className={activeMenu === 'Dashboard' ? 'active' : ''}>Dashboard</li>\r\n                    <li onClick={() => setActiveMenu('Products')} className={activeMenu === 'Products' ? 'active' : ''}>Products</li>\r\n                    <li onClick={() => setActiveMenu('Orders')} className={activeMenu === 'Orders' ? 'active' : ''}>Orders</li>\r\n                    <li onClick={handleLogout} className=\"logout-button\">Logout</li> \r\n                </ul>\r\n            </aside>\r\n\r\n            <main className=\"dashboard-content\">\r\n                {activeMenu === 'Dashboard' && (\r\n                    <>\r\n                        <section className=\"analytics\">\r\n                            <h3 className='text-center my-3'>Analytics Overview</h3>\r\n                            <div className=\"analytics-cards mt-2\">\r\n                                <div className=\"analytics-card\">\r\n                                    <h4>Total Revenue</h4>\r\n                                    <p>£{salesData.total}</p>\r\n                                </div>\r\n                                <div className=\"analytics-card\">\r\n                                    <h4>Total Orders</h4>\r\n                                    <p>{salesData.sales_count}</p>\r\n                                </div>\r\n                                <div className=\"analytics-card\">\r\n                                    <h4>Total Customers</h4>\r\n                                    <p>{salesData.total_buyer}</p>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"order-summary\">\r\n                                <h4>Order Summary by Status</h4>\r\n                                <ul>\r\n                                    {Object.entries(orderSummary).map(([status, count]) => (\r\n                                        <li key={status}>{status}: {count}</li>\r\n                                    ))}\r\n                                </ul>\r\n                            </div>\r\n                        </section>\r\n\r\n                        <section className=\"chart\">\r\n                            <h3>Sales Report</h3>\r\n                            <canvas id=\"salesChart\" width=\"400\" height=\"200\"></canvas>\r\n                        </section>\r\n\r\n                        <section className=\"top-products\">\r\n                            <h3>Top Selling Products</h3>\r\n                            <div className=\"top-products-grid\">\r\n                                {topSellingProducts.map(product => (\r\n                                    <div className=\"top-product-card\" key={product.id}>\r\n                                        <h4>{product.name}</h4>\r\n                                        <p className=\"product-price\">Price: £{product.price}</p>\r\n                                        <p className=\"total-sales\">Total Sales: {product.totalSales}</p>\r\n                                        <div className=\"actions\">\r\n                                            <button className=\"view-button\">View</button>\r\n                                            <button className=\"edit-button\" onClick={() => handleEditProduct(product)}>Edit</button>\r\n                                        </div>\r\n                                    </div>\r\n                                ))}\r\n                            </div>\r\n                        </section>\r\n                    </>\r\n                )}\r\n\r\n                {activeMenu === 'Products' && (\r\n                    <section className=\"products\">\r\n                        <h3>Product List</h3>\r\n                        <form onSubmit={isEditing ? handleUpdateProduct : handleAddProduct}>\r\n                            <input\r\n                                type=\"text\"\r\n                                name=\"name\"\r\n                                placeholder=\"Product Name\"\r\n                                value={productForm.name}\r\n                                onChange={handleInputChange}\r\n                                required\r\n                            />\r\n                            <input\r\n                                type=\"number\"\r\n                                name=\"price\"\r\n                                placeholder=\"Product Price\"\r\n                                value={productForm.price}\r\n                                onChange={handleInputChange}\r\n                                required\r\n                            />\r\n\r\n                            <input\r\n                                type=\"file\"\r\n                                name=\"image\"\r\n        \r\n                                placeholder=\"Product Image\"\r\n                                accept=\"image/*\"\r\n                                onChange={handleFileChange} \r\n                                required={!isEditing} \r\n                            />\r\n                            <button type=\"submit\">{isEditing ? 'Update Product' : 'Add Product'}</button>\r\n                            {isEditing && (\r\n                                <button type=\"button\" onClick={() => { setProductForm({ id: '', name: '', price: '', img: null }); setIsEditing(false); }}>Cancel</button>\r\n                            )}\r\n                        </form>\r\n                         {isAddingProduct && <Spinner />}\r\n                        <div className=\"products-grid\">\r\n                     \r\n                            {products.map((product) => (\r\n                                <div key={product.id} className=\"product-card\">\r\n                                    <img loading=\"lazy\" src={product.img} alt={product.name} />\r\n                                    <h4>{product.name}</h4>\r\n                                    <p>Price: £{product.price}</p>\r\n                                    <div className=\"actions\">\r\n                                        <button onClick={() => handleEditProduct(product)}>Edit</button>\r\n                                        <button onClick={() => handleDeleteProduct(product.id)}>Delete</button>\r\n                                    </div>\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                    </section>\r\n                )}\r\n\r\n                {activeMenu === 'Orders' && (\r\n                    <section className=\"orders\">\r\n                        <h3>Order List</h3>\r\n                        {orders.length > 0 ? (\r\n                            <table className=\"orders-table\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Order ID</th>\r\n                                        <th>Amount</th>\r\n                                        <th>Currency</th>\r\n                                        <th>Email</th>\r\n                                        <th>Address</th>\r\n                                        <th>Payment Status</th>\r\n                                        <th>Created At</th>\r\n                                        <th>Updated At</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {orders.map((order) => (\r\n                                        <tr key={order.id}>\r\n                                            <td>{order.id}</td>\r\n                                            <td>£{order.amount}</td>\r\n                                            <td>{order.currency}</td>\r\n                                            <td>{order.email}</td>\r\n                                            <td>{order.address}</td>\r\n                                            <td>{order.payment_status}</td>\r\n                                            <td>{new Date(order.created_at).toLocaleString()}</td>\r\n                                            <td>{new Date(order.updated_at).toLocaleString()}</td>\r\n                                        </tr>\r\n                                    ))}\r\n                                </tbody>\r\n                            </table>\r\n                        ) : (\r\n                            <p>No orders available.</p>\r\n                        )}\r\n                    </section>\r\n                )}\r\n                  {alertMessage && (\r\n                    <div className={`alert-popup ${fadeOut ? \"alert-popup-exit\" : \"\"}`}>\r\n                        {alertMessage}\r\n                    </div>\r\n                )}\r\n            </main>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AdminDashboard;\r\n"],"names":["Spinner","_jsx","className","children","AdminDashboard","orders","setOrders","useState","alertMessage","setAlertMessage","products","setProducts","salesData","setSalesData","sales_count","total","total_buyer","loading","setLoading","activeMenu","setActiveMenu","productForm","setProductForm","id","name","price","image","isEditing","setIsEditing","chartRef","useRef","fadeOut","setFadeOut","navigate","useNavigate","isAddingProduct","setIsAddingProduct","useEffect","async","productsResponse","fetch","process","REACT_APP_API_URL","productsData","json","salesResponse","ordersResponse","ordersData","err","console","error","fetchData","current","destroy","ctx","document","getElementById","getContext","Chart","type","data","labels","datasets","label","borderColor","backgroundColor","tension","options","responsive","plugins","legend","position","handleInputChange","e","value","target","handleEditProduct","product","topSellingProducts","map","totalSales","reduce","acc","order","product_id","amount","sort","a","b","slice","orderSummary","payment_status","timer","setTimeout","clearTimeout","_jsxs","onClick","response","method","headers","credentials","ok","Error","log","message","alert","_Fragment","Object","entries","_ref","status","count","width","height","onSubmit","preventDefault","formData","FormData","append","key","axios","put","updatedProduct","prevProducts","post","placeholder","onChange","required","accept","file","files","prevState","img","src","alt","filter","handleDeleteProduct","length","currency","email","address","Date","created_at","toLocaleString","updated_at"],"sourceRoot":""}