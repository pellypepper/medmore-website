{"version":3,"file":"static/js/515.09653760.chunk.js","mappings":"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","sources":["component/spinner.js","pages/card/card.js"],"sourcesContent":["import React from \"react\";\r\nimport \"./spinner.css\"; \r\n\r\nconst Spinner = () => {\r\n    return (\r\n        <aside className=\"spinner-container\">\r\n            <div className=\"spinner\"></div>\r\n        </aside>\r\n    );\r\n};\r\n\r\nexport default Spinner;\r\n","import './card.css';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useStripe, useElements, CardNumberElement, CardExpiryElement, CardCvcElement } from '@stripe/react-stripe-js';\r\nimport { useLocation, useNavigate } from \"react-router-dom\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCheckCircle, faExclamationCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport Spinner from '../../component/spinner'; // Import the spinner component\r\n\r\nconst Card = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const stripe = useStripe();\r\n    const elements = useElements();\r\n    const [error, setError] = useState(null);\r\n    const [paymentMethodType, setPaymentMethodType] = useState('card'); // Default to card payment\r\n    const [alertMessage, setAlertMessage] = useState(\"\"); // State for alert message\r\n    const location = useLocation();\r\n    const total = location.state?.total || 0;\r\n    const form = location.state?.form || {};\r\n    const navigate = useNavigate();\r\n    const [fadeOut, setFadeOut] = useState(false);\r\n    const cart = location.state?.cart || [];\r\n\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        if (loading) return; // Prevent double clicks\r\n        setLoading(true);\r\n        setError(null);\r\n        setAlertMessage(\"\");\r\n\r\n        if (!stripe || !elements) {\r\n            console.error('Stripe has not been initialized.');\r\n            setLoading(false);\r\n            return;\r\n        }\r\n\r\n        try {\r\n            console.log('Creating payment intent...');\r\n            const response = await fetch(`${process.env.REACT_APP_API_URL}/create-payment-intent`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ amount: total, paymentMethodType }),\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Failed to create payment intent: ${response.statusText}`);\r\n            }\r\n\r\n            const { clientSecret } = await response.json();\r\n            if (!clientSecret) {\r\n                throw new Error('Client secret is missing in the response.');\r\n            }\r\n\r\n            console.log('Client secret received:', clientSecret);\r\n\r\n            let confirmResult;\r\n\r\n            if (paymentMethodType === 'card') {\r\n                const cardNumberElement = elements.getElement(CardNumberElement);\r\n                const cardExpiryElement = elements.getElement(CardExpiryElement);\r\n                const cardCvcElement = elements.getElement(CardCvcElement);\r\n\r\n                // Check if all elements are available\r\n                if (!cardNumberElement || !cardExpiryElement || !cardCvcElement) {\r\n                    setError('Card elements are not available.');\r\n                    setLoading(false);\r\n                    return;\r\n                }\r\n\r\n                confirmResult = await stripe.confirmCardPayment(clientSecret, {\r\n                    payment_method: {\r\n                        card: cardNumberElement,\r\n                    },\r\n                });\r\n            } else if (['apple_pay', 'google_pay', 'klarna'].includes(paymentMethodType)) {\r\n                // Placeholder for handling other payment methods\r\n                console.log(`Payment method type '${paymentMethodType}' selected, but not implemented.`);\r\n                setError(`Payment method '${paymentMethodType}' is not yet supported.`);\r\n                setLoading(false);\r\n                return;\r\n            }\r\n\r\n            if (confirmResult && confirmResult.error) {\r\n                console.error('Payment failed:', confirmResult.error.message);\r\n                setError(confirmResult.error.message);\r\n            } else if (confirmResult && confirmResult.paymentIntent) {\r\n                console.log('Payment successful:', confirmResult.paymentIntent);\r\n                console.log('Payment intent ID:', confirmResult.paymentIntent.id);\r\n                console.log(cart);\r\n                await sendUserDataToServer(form, confirmResult.paymentIntent.id, cart);\r\n                navigate('/order', {\r\n                    state: {\r\n                        order: {\r\n                            id: confirmResult.paymentIntent.id,\r\n                            total: total,\r\n                            email: form.email,\r\n                            items: cart.map(item => ({\r\n                                name: item.productName, // Ensure the property is correct\r\n                                quantity: item.quantity,\r\n                            })),\r\n                        },\r\n                    },\r\n                });\r\n            \r\n            } else {\r\n                console.error('Unexpected payment confirmation result:', confirmResult);\r\n                setError('An unexpected error occurred during payment confirmation.');\r\n            }\r\n        } catch (err) {\r\n            console.error('Error in payment flow:', err.message);\r\n            setError(err.message);\r\n        } finally {\r\n            setLoading(false); // Ensure loading state is turned off\r\n        }\r\n    };\r\n\r\n    const sendUserDataToServer = async (userData, paymentIntentId, cart) => {\r\n        try {\r\n            const response = await fetch(`${process.env.REACT_APP_API_URL}/record-payment`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ ...userData, paymentIntentId, cart }),\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Failed to record payment: ${response.statusText}`);\r\n            }\r\n\r\n            const result = await response.json();\r\n            console.log('User data recorded successfully:', result);\r\n            // Optionally navigate to a success page or show a confirmation message\r\n            setAlertMessage(` \"Payment recorded successfully!\" `);\r\n        } catch (error) {\r\n            console.error('Error recording payment:', error);\r\n            setError('Failed to record payment on server.');\r\n        }\r\n    };\r\n    \r\n\r\n    useEffect(() => {\r\n        if (alertMessage || error) {\r\n            const timer = setTimeout(() => {\r\n                setFadeOut(true); // Trigger fade out\r\n                const removeAlertTimer = setTimeout(() => {\r\n                    setAlertMessage(\"\"); \r\n                    setError(\"\");\r\n                    setFadeOut(false); \r\n                }, 500); \r\n\r\n                return () => clearTimeout(removeAlertTimer);\r\n            }, 5000); \r\n\r\n            return () => clearTimeout(timer); \r\n        }\r\n    }, [alertMessage, error]);\r\n\r\n  \r\n    \r\n\r\n    return (\r\n        <div className='card-section'>\r\n            <div className='card-wrapper'>\r\n                <div className='card-text'>\r\n                    <p>${total}</p>\r\n                    <p>Payment</p>\r\n                </div>\r\n\r\n                {loading && <Spinner />} \r\n                \r\n                <form className='mt-2' onSubmit={handleSubmit}>\r\n                    <label className='label'>\r\n                        Payment Method:\r\n                        <div className='payment-div'>\r\n                            <div>\r\n                                <input\r\n                                    type='radio'\r\n                                    onChange={(e) => setPaymentMethodType(e.target.value)}\r\n                                    name='paymentMethod'\r\n                                    value='card'\r\n                                    defaultChecked\r\n                                />\r\n                                <img src='card.webp' alt='card' /> Card\r\n                            </div>\r\n                            <div>\r\n                                <input\r\n                                    type='radio'\r\n                                    onChange={(e) => setPaymentMethodType(e.target.value)}\r\n                                    name='paymentMethod'\r\n                                    value='apple_pay'\r\n                                />\r\n                                <img src='apple.webp' alt='apple' /> Apple Pay\r\n                            </div>\r\n                            <div>\r\n                                <input\r\n                                    type='radio'\r\n                                    onChange={(e) => setPaymentMethodType(e.target.value)}\r\n                                    name='paymentMethod'\r\n                                    value='google_pay'\r\n                                />\r\n                                <img src='google.webp' alt='google' /> Google Pay\r\n                            </div>\r\n                            <div>\r\n                                <input\r\n                                    type='radio'\r\n                                    onChange={(e) => setPaymentMethodType(e.target.value)}\r\n                                    name='paymentMethod'\r\n                                    value='klarna'\r\n                                />\r\n                                <img src='klarna.webp' alt='klarna' /> Klarna\r\n                            </div>\r\n                        </div>\r\n                    </label>\r\n\r\n                    {paymentMethodType === 'card' && (\r\n                        <>\r\n                            <label htmlFor=\"card-number\">Card Number</label>\r\n                            <CardNumberElement\r\n                                id=\"card-number\"\r\n                                className=\"card-element full-width\"\r\n                                options={{\r\n                                    style: {\r\n                                        base: {\r\n                                            fontSize: '16px',\r\n                                            color: '#424770',\r\n                                            '::placeholder': {\r\n                                                color: '#aab7c4',\r\n                                            },\r\n                                        },\r\n                                        invalid: {\r\n                                            color: '#9e2146',\r\n                                        },\r\n                                    },\r\n                                }}\r\n                            />\r\n\r\n                            <label htmlFor=\"card-expiry\">Expiry Date</label>\r\n                            <CardExpiryElement\r\n                                id=\"card-expiry\"\r\n                                className=\"card-element\"\r\n                                options={{\r\n                                    style: {\r\n                                        base: {\r\n                                            fontSize: '16px',\r\n                                            color: '#424770',\r\n                                            '::placeholder': {\r\n                                                color: '#aab7c4',\r\n                                            },\r\n                                        },\r\n                                        invalid: {\r\n                                            color: '#9e2146',\r\n                                        },\r\n                                    },\r\n                                }}\r\n                            />\r\n\r\n                            <label htmlFor=\"card-cvc\">CVV</label>\r\n                            <CardCvcElement\r\n                                id=\"card-cvc\"\r\n                                className=\"card-element\"\r\n                                options={{\r\n                                    style: {\r\n                                        base: {\r\n                                            fontSize: '16px',\r\n                                            color: '#424770',\r\n                                            '::placeholder': {\r\n                                                color: '#aab7c4',\r\n                                            },\r\n                                        },\r\n                                        invalid: {\r\n                                            color: '#9e2146',\r\n                                        },\r\n                                    },\r\n                                }}\r\n                            />\r\n                        </>\r\n                    )}\r\n                    <button className='button' type=\"submit\" disabled={!stripe || loading}>\r\n                        {loading ? 'Processing...' : `Pay Now $${total}`}\r\n                    </button>\r\n                    {error && <div className='error'>{error}</div>}\r\n                </form>\r\n            </div>\r\n\r\n            {alertMessage && (\r\n                <div className={`success-popup ${fadeOut ? 'success-popup-exit' : ''}`}>\r\n                    <FontAwesomeIcon icon={faCheckCircle} color=\"green\" size=\"2x\" />\r\n                    <p>Payment Successful</p>\r\n                    <p>{alertMessage}</p>\r\n                </div>\r\n            )}\r\n\r\n            {error && (\r\n                <div className={`error ${fadeOut ? 'error-exit' : ''}`}>\r\n                    <FontAwesomeIcon icon={faExclamationCircle} color=\"red\" size=\"2x\" />\r\n                    <p>Payment Declined</p>\r\n                    <p>{error}</p>\r\n                    <button className='mt-1' onClick={() => setError('')}> Try Again</button>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Card;\r\n"],"names":["Spinner","_jsx","className","children","Card","_location$state","_location$state2","_location$state3","loading","setLoading","useState","stripe","useStripe","elements","useElements","error","setError","paymentMethodType","setPaymentMethodType","alertMessage","setAlertMessage","location","useLocation","total","state","form","navigate","useNavigate","fadeOut","setFadeOut","cart","sendUserDataToServer","async","userData","paymentIntentId","response","fetch","method","headers","body","JSON","stringify","ok","Error","statusText","result","json","console","log","useEffect","timer","setTimeout","removeAlertTimer","clearTimeout","_jsxs","onSubmit","event","preventDefault","amount","clientSecret","confirmResult","cardNumberElement","getElement","CardNumberElement","cardExpiryElement","CardExpiryElement","cardCvcElement","CardCvcElement","confirmCardPayment","payment_method","card","includes","message","paymentIntent","id","order","email","items","map","item","name","productName","quantity","err","type","onChange","e","target","value","defaultChecked","src","alt","_Fragment","htmlFor","options","style","base","fontSize","color","invalid","disabled","FontAwesomeIcon","icon","faCheckCircle","size","faExclamationCircle","onClick"],"sourceRoot":""}