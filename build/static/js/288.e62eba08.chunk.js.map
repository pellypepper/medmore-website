{"version":3,"file":"static/js/288.e62eba08.chunk.js","mappings":"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","sources":["component/spinner.js","pages/adminDashboard/admin.js"],"sourcesContent":["import React from \"react\";\nimport \"./spinner.css\"; \n\nconst Spinner = () => {\n    return (\n        <aside className=\"spinner-container\">\n            <div className=\"spinner\"></div>\n        </aside>\n    );\n};\n\nexport default Spinner;\n","import React, { useEffect, useState, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Chart from 'chart.js/auto';\nimport Spinner from '../../component/spinner'; \nimport axios from 'axios';\nimport './admin.css';\n\nconst AdminDashboard = () => {\n    const [orders, setOrders] = useState([]);\n    const [alertMessage, setAlertMessage] = useState(\"\");\n    const [products, setProducts] = useState([]);\n    const [salesData, setSalesData] = useState({ sales_count: 0, total: 0, total_buyer: 0 });\n    const [loading, setLoading] = useState(false);\n    const [activeMenu, setActiveMenu] = useState('Dashboard'); \n    const [productForm, setProductForm] = useState({ id: '', name: '', price: '', image: null }); // Change img to null\n    const [isEditing, setIsEditing] = useState(false);\n    const chartRef = useRef(null); \n    const [fadeOut, setFadeOut] = useState(false);\n    const navigate = useNavigate();\n    const [isAddingProduct, setIsAddingProduct] = useState(false); // New state for spinner\n\n\n    const handleLogout = async () => {\n        try {\n            const response = await fetch(`${process.env.REACT_APP_API_URL}/logout`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                credentials: 'include', \n            });\n    \n            if (!response.ok) {\n                throw new Error('Failed to log out');\n            }\n    \n            const data = await response.json();\n            console.log(data.message); \n            navigate('/'); \n        } catch (error) {\n            console.error('Logout error:', error);\n            alert('Failed to log out. Please try again.');  \n          setAlertMessage('Failed to log out. Please try again.');\n        }\n    };\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                setLoading(true);\n                const productsResponse = await fetch(`${process.env.REACT_APP_API_URL}/products`);\n                const productsData = await productsResponse.json();\n\n                const salesResponse = await fetch(`${process.env.REACT_APP_API_URL}/sales`);\n                const salesData = await salesResponse.json();\n\n                const ordersResponse = await fetch(`${process.env.REACT_APP_API_URL}/orders`);\n                const ordersData = await ordersResponse.json();\n                console.log('Fetched orders:', ordersData);\n\n                setProducts(productsData);\n                setSalesData(salesData);\n                setOrders(ordersData);\n            } catch (err) {\n                console.error('Failed to fetch data', err);\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchData();\n    }, []);\n\n    useEffect(() => {\n        if (chartRef.current) {\n            chartRef.current.destroy();\n        }\n\n        if (salesData.sales_count > 0 && activeMenu === 'Dashboard') {\n            const ctx = document.getElementById('salesChart').getContext('2d');\n            chartRef.current = new Chart(ctx, {\n                type: 'line',\n                data: {\n                    labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May'], \n                    datasets: [\n                        {\n                            label: 'Sales ($)',\n                            data: [1200, 1900, 3000, 5000, 2400], \n                            borderColor: 'rgba(75, 192, 192, 1)',\n                            backgroundColor: 'rgba(75, 192, 192, 0.2)',\n                            tension: 0.4,\n                        },\n                    ],\n                },\n                options: {\n                    responsive: true,\n                    plugins: {\n                        legend: { position: 'top' },\n                    },\n                },\n            });\n        }\n\n        return () => {\n            if (chartRef.current) {\n                chartRef.current.destroy();\n            }\n        };\n    }, [salesData, activeMenu]);\n\n\n\n    const handleInputChange = (e) => {\n        const { name, value } = e.target;\n        setProductForm({ ...productForm, [name]: value });\n    };\n\n    const handleFileChange = (e) => {\n        const file = e.target.files[0];\n        console.log('Selected File:', file);\n        \n        if (file) {\n            setProductForm(prevState => ({\n                ...prevState,\n                image: file // Directly set the File object\n            }));\n        }\n    };\n    \n    const handleAddProduct = async (e) => {\n        e.preventDefault();\n        setIsAddingProduct(true);\n        // Validation\n        if (!productForm.name || !productForm.price) {\n            alert('Please enter product name and price');\n            return;\n        }\n    \n        if (!productForm.image) {\n            alert('Please select an image');\n            return;\n        }\n    \n        // const formData = new FormData();\n     \n        // formData.append('image', productForm.image);\n        // console.log('Form Data:', formData);\n        \n        // for (const [key, value] of formData.entries()) {\n        //     console.log(`${key}:`, value);\n        // }\n        const formData = new FormData();\n        formData.append('image', productForm.image);\n        formData.append('name', productForm.name);\n        formData.append('price', productForm.price);\n        \n\n    \n        try {\n\n       \n            const response = await axios.post(\n                `${process.env.REACT_APP_API_URL}/products`, \n                formData, \n                {\n                    headers: {\n            \n                        'Content-Type': 'multipart/form-data',\n                    }\n                }\n            );\n    \n            // Correct way to handle axios response\n            console.log('New Product Added:', response.data);\n           \n          \n            // Update products list\n            setProducts((prevProducts) => [...prevProducts, response.data]);\n            \n            // Reset form\n            setProductForm({ id: '', name: '', price: '', image: null });\n            \n            setAlertMessage('Product added successfully!');\n\n         \n    \n        } catch (error) {\n            console.log(error.message);\n            console.error('Complete Error:', error.response ? error.response.data : error.message);\n            alert();\n            setAlertMessage(`Failed to add product: ${error.response ? error.response.data.error : error.message}`);\n        } finally {\n            setIsAddingProduct(false);\n        }   \n    };\n    \n    const handleEditProduct = (product) => {\n        setProductForm({ id: product.id, name: product.name, price: product.price, image: null });\n        setIsEditing(true);\n    };\n\n    const handleUpdateProduct = async (e) => {\n        e.preventDefault();\n        setIsAddingProduct(true);\n        const formData = new FormData();\n        formData.append('name', productForm.name);\n        formData.append('price', productForm.price);\n        if (productForm.image) {\n            formData.append('image', productForm.image);\n        }\n        console.log('Form Data:', formData);\n        \n        for (const [key, value] of formData.entries()) {\n            console.log(`${key}:`, value);\n        }\n    \n        try {\n            const response = await axios.put(\n                `${process.env.REACT_APP_API_URL}/products/${productForm.id}`, \n                formData, \n                {\n                    headers: {\n                        'Content-Type': 'multipart/form-data',\n                    }\n                }\n            );\n    \n            // Error: response.ok doesn't exist on axios response\n            // Instead, check response status\n            if (response.status !== 200) {\n                throw new Error('Failed to update product');\n            }\n    \n            // Error: response.json() doesn't exist on axios\n            // Use response.data instead\n            const updatedProduct = response.data;\n    \n            setProducts((prevProducts) =>\n                prevProducts.map((product) =>\n                    product.id === updatedProduct.id ? updatedProduct : product\n                )\n            );\n    \n            setProductForm({ id: '', name: '', price: '', image: null });\n            setIsEditing(false);\n            setAlertMessage('Product Updated successfully!');\n        } catch (error) {\n            console.error('Error updating product:', error);\n        } finally {\n            setIsAddingProduct(false);\n        }   \n    };\n\n    const handleDeleteProduct = async (id) => {\n        try {\n            const response = await fetch(`${process.env.REACT_APP_API_URL}/products/${id}`, {\n                method: 'DELETE',\n            });\n\n            if (!response.ok) {\n                throw new Error('Failed to delete product');\n            }\n\n            setProducts((prevProducts) => prevProducts.filter((product) => product.id !== id));\n        } catch (error) {\n            console.error('Error deleting product:', error);\n        }\n    };\n\n    const getTopSellingProducts = () => {\n        const productSales = products.map(product => {\n            const totalSales = orders.reduce((acc, order) => {\n                if (order.product_id === product.id) {\n                    return acc + order.amount;\n                }\n                return acc;\n            }, 0);\n            return { ...product, totalSales };\n        });\n        return productSales.sort((a, b) => b.totalSales - a.totalSales).slice(0, 5);\n    };\n\n    const topSellingProducts = getTopSellingProducts();\n\n    const getOrderSummary = () => {\n        return orders.reduce((acc, order) => {\n            acc[order.payment_status] = (acc[order.payment_status] || 0) + 1;\n            return acc;\n        }, {});\n    };\n\n    const orderSummary = getOrderSummary();\n\n    useEffect(() => {\n        if (alertMessage) {\n            const timer = setTimeout(() => {\n                setFadeOut(true);\n            }, 5000);\n\n            return () => clearTimeout(timer);\n        } else {\n            setFadeOut(false);\n        }\n    }, [alertMessage]);\n\n    if (loading) return <Spinner />;\n\n\n    return (\n        <div className=\"admin-dashboard\">\n            <aside className=\"sidebar\">\n                <h2>Admin Dashboard</h2>\n                <ul>\n                    <li onClick={() => setActiveMenu('Dashboard')} className={activeMenu === 'Dashboard' ? 'active' : ''}>Dashboard</li>\n                    <li onClick={() => setActiveMenu('Products')} className={activeMenu === 'Products' ? 'active' : ''}>Products</li>\n                    <li onClick={() => setActiveMenu('Orders')} className={activeMenu === 'Orders' ? 'active' : ''}>Orders</li>\n                    <li onClick={handleLogout} className=\"logout-button\">Logout</li> \n                </ul>\n            </aside>\n\n            <main className=\"dashboard-content\">\n                {activeMenu === 'Dashboard' && (\n                    <>\n                        <section className=\"analytics\">\n                            <h3 className='text-center my-3'>Analytics Overview</h3>\n                            <div className=\"analytics-cards mt-2\">\n                                <div className=\"analytics-card\">\n                                    <h4>Total Revenue</h4>\n                                    <p>£{salesData.total}</p>\n                                </div>\n                                <div className=\"analytics-card\">\n                                    <h4>Total Orders</h4>\n                                    <p>{salesData.sales_count}</p>\n                                </div>\n                                <div className=\"analytics-card\">\n                                    <h4>Total Customers</h4>\n                                    <p>{salesData.total_buyer}</p>\n                                </div>\n                            </div>\n                            <div className=\"order-summary\">\n                                <h4>Order Summary by Status</h4>\n                                <ul>\n                                    {Object.entries(orderSummary).map(([status, count]) => (\n                                        <li key={status}>{status}: {count}</li>\n                                    ))}\n                                </ul>\n                            </div>\n                        </section>\n\n                        <section className=\"chart\">\n                            <h3>Sales Report</h3>\n                            <canvas id=\"salesChart\" width=\"400\" height=\"200\"></canvas>\n                        </section>\n\n                        <section className=\"top-products\">\n                            <h3>Top Selling Products</h3>\n                            <div className=\"top-products-grid\">\n                                {topSellingProducts.map(product => (\n                                    <div className=\"top-product-card\" key={product.id}>\n                                        <h4>{product.name}</h4>\n                                        <p className=\"product-price\">Price: £{product.price}</p>\n                                        <p className=\"total-sales\">Total Sales: {product.totalSales}</p>\n                                        <div className=\"actions\">\n                                            <button className=\"view-button\">View</button>\n                                            <button className=\"edit-button\" onClick={() => handleEditProduct(product)}>Edit</button>\n                                        </div>\n                                    </div>\n                                ))}\n                            </div>\n                        </section>\n                    </>\n                )}\n\n                {activeMenu === 'Products' && (\n                    <section className=\"products\">\n                        <h3>Product List</h3>\n                        <form onSubmit={isEditing ? handleUpdateProduct : handleAddProduct}>\n                            <input\n                                type=\"text\"\n                                name=\"name\"\n                                placeholder=\"Product Name\"\n                                value={productForm.name}\n                                onChange={handleInputChange}\n                                required\n                            />\n                            <input\n                                type=\"number\"\n                                name=\"price\"\n                                placeholder=\"Product Price\"\n                                value={productForm.price}\n                                onChange={handleInputChange}\n                                required\n                            />\n\n                            <input\n                                type=\"file\" // Change to file input\n                                name=\"image\"\n        \n                                placeholder=\"Product Image\"\n                                accept=\"image/*\" // Accept image files\n                                onChange={handleFileChange} // Handle file change\n                                required={!isEditing} // Make required only if not editing\n                            />\n                            <button type=\"submit\">{isEditing ? 'Update Product' : 'Add Product'}</button>\n                            {isEditing && (\n                                <button type=\"button\" onClick={() => { setProductForm({ id: '', name: '', price: '', img: null }); setIsEditing(false); }}>Cancel</button>\n                            )}\n                        </form>\n                         {isAddingProduct && <Spinner />}\n                        <div className=\"products-grid\">\n                     \n                            {products.map((product) => (\n                                <div key={product.id} className=\"product-card\">\n                                    <img src={product.img} alt={product.name} />\n                                    <h4>{product.name}</h4>\n                                    <p>Price: £{product.price}</p>\n                                    <div className=\"actions\">\n                                        <button onClick={() => handleEditProduct(product)}>Edit</button>\n                                        <button onClick={() => handleDeleteProduct(product.id)}>Delete</button>\n                                    </div>\n                                </div>\n                            ))}\n                        </div>\n                    </section>\n                )}\n\n                {activeMenu === 'Orders' && (\n                    <section className=\"orders\">\n                        <h3>Order List</h3>\n                        {orders.length > 0 ? (\n                            <table className=\"orders-table\">\n                                <thead>\n                                    <tr>\n                                        <th>Order ID</th>\n                                        <th>Amount</th>\n                                        <th>Currency</th>\n                                        <th>Email</th>\n                                        <th>Address</th>\n                                        <th>Payment Status</th>\n                                        <th>Created At</th>\n                                        <th>Updated At</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {orders.map((order) => (\n                                        <tr key={order.id}>\n                                            <td>{order.id}</td>\n                                            <td>£{order.amount}</td>\n                                            <td>{order.currency}</td>\n                                            <td>{order.email}</td>\n                                            <td>{order.address}</td>\n                                            <td>{order.payment_status}</td>\n                                            <td>{new Date(order.created_at).toLocaleString()}</td>\n                                            <td>{new Date(order.updated_at).toLocaleString()}</td>\n                                        </tr>\n                                    ))}\n                                </tbody>\n                            </table>\n                        ) : (\n                            <p>No orders available.</p>\n                        )}\n                    </section>\n                )}\n                  {alertMessage && (\n                    <div className={`alert-popup ${fadeOut ? \"alert-popup-exit\" : \"\"}`}>\n                        {alertMessage}\n                    </div>\n                )}\n            </main>\n        </div>\n    );\n};\n\nexport default AdminDashboard;\n"],"names":["Spinner","_jsx","className","children","AdminDashboard","orders","setOrders","useState","alertMessage","setAlertMessage","products","setProducts","salesData","setSalesData","sales_count","total","total_buyer","loading","setLoading","activeMenu","setActiveMenu","productForm","setProductForm","id","name","price","image","isEditing","setIsEditing","chartRef","useRef","fadeOut","setFadeOut","navigate","useNavigate","isAddingProduct","setIsAddingProduct","useEffect","async","productsResponse","fetch","productsData","json","salesResponse","ordersResponse","ordersData","console","log","err","error","fetchData","current","destroy","ctx","document","getElementById","getContext","Chart","type","data","labels","datasets","label","borderColor","backgroundColor","tension","options","responsive","plugins","legend","position","handleInputChange","e","value","target","handleEditProduct","product","topSellingProducts","map","totalSales","reduce","acc","order","product_id","amount","sort","a","b","slice","orderSummary","payment_status","timer","setTimeout","clearTimeout","_jsxs","onClick","response","method","headers","credentials","ok","Error","message","alert","_Fragment","Object","entries","_ref","status","count","width","height","onSubmit","preventDefault","formData","FormData","append","key","axios","put","updatedProduct","prevProducts","post","placeholder","onChange","required","accept","file","files","prevState","img","src","alt","filter","handleDeleteProduct","length","currency","email","address","Date","created_at","toLocaleString","updated_at"],"sourceRoot":""}